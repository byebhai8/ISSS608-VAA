[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer, If they are, then they will be launched into R. Also, this code chunk assumes that we have pacman package installed. If not, install pacman first.\n\npacman::p_load(tidyverse)\n\n\n\n\nThis code chuk below imports the exam_data.csv into the R environment by using the read_csv() function of readr package, which is one of the tidyverse package.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "R Graphics vs ggplot",
    "text": "R Graphics vs ggplot\nR graphics\n\nhist(exam_data$MATHS)\n\n\n\n\nggplot2\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 10,\n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nThen, why ggplot2? It is a powerful way of thinking about visualization, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#what-is-a-statistical-graph",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#what-is-a-statistical-graph",
    "title": "Hands-on Exercise 1",
    "section": "What is a statistical graph?",
    "text": "What is a statistical graph?\nGrammar of graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph. There are two principles; graphics = distinct layers of grammatical elements, and meaningful plots through aesthetic mapping.\nA good grammar will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics. A grammar provides a strong foundation for understanding a diverse range of graphics. A grammar may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#ggplot",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#ggplot",
    "title": "Hands-on Exercise 1",
    "section": "ggplot()",
    "text": "ggplot()\nThis initializes a ggplot object. The data argument defines the dataset to be used for plotting. If the dataset is not already a data.frame, it will be converted to one by fortify()\n\nggplot(data = exam_data)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#aesthetic-mapping",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#aesthetic-mapping",
    "title": "Hands-on Exercise 1",
    "section": "Aesthetic mapping",
    "text": "Aesthetic mapping\nEach visual characteristic can encode an aspect of the data, and can beu sed to convey information. All aesthetics of the plot are specified in the aes() function call.\nThe code chunk on the right addes the aesthetic element into the plot. Notice that ggplot includes the x-axis and the axis’s labels.\n\nggplot(data = exam_data,\n       aes(x = MATHS))"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#geometric-objects",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#geometric-objects",
    "title": "Hands-on Exercise 1",
    "section": "Geometric objects",
    "text": "Geometric objects\nThese are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines\ngeom_smooth for drawing smoothed lines (e.g., for simple trends)\ngeom_bar for drawing bars\ngeom_histogram for for drawing binned values, the default bin is 30\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot by using the + operator.\n\nGeom Objects: geom_dotplot\nIn a dot plot, the width of a ddot corresponds to the bin width (or max width), and dots are stacked, with each dot representing one observation. Be warned: The y scale is not very useful. In fact, it can be very misleading.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\nThs code chunk below performs the following:\n\nscale_y_continuous() is used to turn off the y-axis\nbinwidth argument is used to change the binwidth to 2.5\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\n\nGeom Objects: geom_histogram()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20\nfill argument is used to shade the histogram with light blue color\ncolor argument is used to change the outline color of the bars in black\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"light blue\")\n\n\n\n\nThe code chunk below changes the interior color of the histogram by using sub-group of aesthetic().\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins = 20,\n                 color = \"grey30\")\n\n\n\n\nThis approach can be used to color, fill and alpha of the geometric.\n\n\nGeometric Objects: geom-density\nThis computes and plots kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code chunk below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes().\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           color = GENDER)) +\n  geom_density()\n\n\n\n\n\n\nGeometric Objects: geom_boxplot\nThis will display a continuous value list. It visualises the five number summary statistics and all outlying points individually.\nNotches are used in boxplots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by Gender in a notched plot instead of boxplot.\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           color = GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\nCombining Geometric Objects\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot() +\n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\n\nGeometric Objects: geom_violin\nThis is designed for creating violin plot. It is a way of comparing multiple data distributions. With ordinary distribution curves, it is difficult to compare more than just a few distributions because the lines virtually interfere with each other.\nWith a violin plot, it’s easier to compare several distributions since they’re packed side by side.\nThe code below plots the distribution of Maths score by Gender in a violin plot.\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#statistics-stat",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#statistics-stat",
    "title": "Hands-on Exercise 1",
    "section": "Statistics, stat",
    "text": "Statistics, stat\nThe Statistics functions statistically transforms data, usually as a some form of summary. There are two ways to use these functions:\n\nadd a stat_() function and override the default geom\nadd a geom_() function and oveeride the default stat\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data = exam_data, \n       aes(y = MATHS, x = GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"red\",        \n               size = 4)      \n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\nThe code chunk below adds mean values by using geom_() function and overriding the default stat.\n\nggplot(data = exam_data, \n       aes(y = MATHS, x = GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"red\", \n             size = 4)    \n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#best-fit-curve",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#best-fit-curve",
    "title": "Hands-on Exercise 1",
    "section": "Best Fit Curve",
    "text": "Best Fit Curve\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatteplot.\nThe default method used is loess:\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(size = 0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nThe default smoothing method can be overriden:\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#facets",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#facets",
    "title": "Hands-on Exercise 1",
    "section": "Facets",
    "text": "Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data, These are an alternative to aesthetics for displaying additional discrete variables. ggplot2 suports two types of facets; facet_grid() and facet_wrap().\n\nfacet_wrap()\nThis wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet_wrap().\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS)\n\n\n\n\n\n\nfacet_grid()\nThis forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#coordinates",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#coordinates",
    "title": "Hands-on Exercise 1",
    "section": "Coordinates",
    "text": "Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values\ncoord_flip(): a cartesian system with the x and y flipped\ncoord_fixed(): a cartesian system with a fixed aspect ration\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps\n\nBy default, the bar chart of ggplot2 is in vertical form. The code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip()\n\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\nThe code chunk below fixes both the y-axis and x-axis range from 0 to 100.\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex01/Take_Home_Ex01.html",
    "href": "Take_Home_Ex/Take_Home_Ex01/Take_Home_Ex01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "The following is my submission for Take-Home Exercise 1.\n\nDataset\nThe dataset used in this take-home exercise was downloaded from the following link, below the sub-section of Population Trends: https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data\nIn my case, I have selected the Singapore Residents by Planning Area / Subzone, Age Group, Sex and Floor Area of Residence, June 2022.csv option. A zip folder will be downloaded. Upon unzipping the folder, there are two files that are contained in this unzipped folder; one for the raw dataset and one for the notes of the dataset (similar to a readme file).\nUnzipped folder:\n\nDataset:\n\nNotes of Dataset:\n\n\n\nPreparation Steps\nNow, let’s bring in this raw dataset to Tableau Desktop for our analysis. Please find below a reproducible description of the procedures used to prepare and create the analytical visualization in Tableau Desktop.\n\n\n\n\n\n\n\n\nNo.\nStep\nScreenshot\n\n\n1\nIn Tableau Desktop, in the Data Source pane, click on “Text file” (since we are dealing with a csv file and not an excel file).\nWhen the popup prompts you to choose a file, click on the raw dataset.\n\n\n\n\n2\nOnce the raw dataset is loaded, note that the data source name and field names are not that meaningful. Let’s first change the data source name to: Planning Area - Jun 2022.\nLet’s also change the field names according to the Notes of Dataset file that was in the unzipped folder.\n\n\n\n\n\n\n3\nOnce the field names are updated, notice that the field Time is identified to be a numerical field. However, this is supposed to reflect the Year of the record. Hence, let’s change this field’s datatype to Date.\n\n\n\n\n\n4\nIn our task, we want to plot the male population and female population against their age groups. For this, let’s create two calculated fields to distinguish the populations by gender.\nCreate a calculated field for Male Population (where Sex is “Males”).\nLikewise, create a calculated field for Female Population (where Sex is “Females”).\n\n\n\n\n\n5\nNotice that the values in the Age Group field are in bins of 5. Let’s group these values into bins of 15 to simplify our analysis.\nRight click on the Age Group field and click on “Create Group…”.\nLet’s create the following groupings to create age groups with bins of 15.\n\n\n\n\n6\nIn our task, it is stated that we only show 9 planning areas in a view. So, to reduce the size of the data that we load, let’s filter the data source to only keep 9 planning areas in the data. Click on “Add” to add a new data source filter.\nIn the Data Source Filters popup, click on “Add” to add a new filter for the Planning Area field.\nOnce you click on “Ok”, you will be prompted in a popup to choose which values in the Planning Area field you want to keep in the view. Select the tab “Top”, and the radio button “By field” to choose the Top 9 by Population Sum. This will filter the data to only show the top 9 planning areas which have the highest population.\nClick on “Ok” to close the popup. Notice that the Data Source Filters popup, there is a new row stating that Planning Area keeps 9 of 55 members. This indicates that our filter is successfully applied.\nClick on “Ok” to close the Data Source Filters popup. Notice now that the upper right hand corner indicates that there is one filter being applied to the data source.\n\n\n\n\n\n\n\n\n7\nNow, let’s build the visualization in “Sheet 1”. To set the base for our visualization, which is going to be a 3x3 matrix, let’s create two calculated fields; one for columns and one for rows.\nDrag Columns and Rows fields to the Column and Row panes respectively.\nYour view will look like a quadrant.\nLet’s switch the Columns and Rows fields from Continuous to Discrete.\nYour view will be updated to a table.\n\n\n\n\n\n\n\n8\nNow, let’s drag the two calculated fields we created (Male Population & Female Population) to the Columns pane and the Age Group (Group) field to the Rows pane. Notice now that we have two bar charts - one for male population and one for female population, for each age group in our dataset.\n\n\n\n9\nLet’s convert our bar charts for the genders into a pyramid-like view by editing the axis for the Male Population field. Right click on the axis for Male Population field and select “Edit Axis”.\nIn the popup, under the section “Scale”, tick the check-box for “Reversed” to reverse the axis for the Male Population field. Now, if you close this popup, you will notice that the divider between the two bar charts indicates that the axis starts from 0K.\n\n\n\n\n\n10\nNow that we have a pyramid-like view for the age-sex breakdown, let’s bring in the planning area information by dragging the field Planning Area into the Details section of the All marks card.\n\n\n\n11\nLet’s update how the calculated fields Columns and Rows are computed - which should be based on the Planning Area field.\nNotice now that the view has been updated to a 3x3 matrix.\n\n\n\n\n\n12\nTo distinguish between the two genders in our view, let’s color the bars accordingly.\nIn the marks card for Male Population field, change the color to teal.\nSimilarly, in the marks card for Female Population field, change the color to red.\nNow, we can clearly distinguish between the Male and Female bars in our view.\n\n\n\n\n\n13\nNow, let’s do some formatting to the view starting with how the view is displayed.\nLet’s change the view from”Standard” to “Entire View” to spread out our display.\n\n\n\n14\nNow we can view the full chart in the view. However, it still looks cluttered. Let’s remove the axis headers for both Male Population and Female Population fields.\nRight click on the axis header and un-check “Show Header” for either of the axis. This will remove the axis header in our chart.\nLet’s also remove the header for the Columns and Rows fields. Un-check “Show Header” for both these fields.\n\n\n\n\n\n15\nLet’s format the bars in the view now. Under the marks card for All, drag the slider to reduce the size of the bars till the recommended size (indicated by a pipe).\n\n\n\n16\nNotice that there are many grid lines in our chart which makes the view cluttered. To format grid line, right click on the view and select the “Format” option.\nIn the format panel, click on the icon for grid lines. Under the tab “Columns”, set Grid Lines to None.\n\n\n\n\n17\nLet’s include the text labels by including the relevant fields in the label section of the marks card.\nFor the male population marks card, let’s drag the SUM(Male Population) field to the label section. To format this text label, right click on the SUM(Male Population) field in the marks card and click on “Format”.\nIn the format panel, click on “Pane”. Under the “Numbers” option, select “Custom”. Change the number of decimal places to 0 and the display units to thousands.\nRepeat the same steps for the SUM(Female Population) field.\n\n\n\n\n\n18\nNotice that the y-axis, Age Group (Group) field is sorted by default. Let’s switch this to sort by descending order so that we can view the age group starting from the youngest age to the oldest age.\nRight click on Age Group (Group) field in the Rows pane and select “Sort”.\nIn the popup, change the sort order to “Descending”.\n\n\n\n\n19\nLet’s also sort the x-axis, Planning Area field to be in descending order based on the sum of population.\nTo do this, let’s right click the Planning Area field in the All marks card and select “Sort”.\nFor the Planning Area field, let’s sort by Sum of Population in Descending Order.\n\n\n\n\n20\nNow, we have our 3x3 matrix of male and female population by their age groups in the top 9 planning areas by population. However, at one glance, we can’t say what are these top 9 planning areas.\nTo bring the Planning Area field as a text label for this view, let’s create a dummy calculated field called dummy.\nThis dummy field is being assigned the value of 40K for the age group of “90 and above”. The reason we choose this age group is because we want our text label to be shown on the same row as this age group value in our trellis chart. As for the value of 40K, I chose this because it is higher than those values in our trellis chart.\n\n\n\n\n21\nBring this new calculated field, dummy, into the view on the Columns panel. Ensure that the dummy field is taking the AVG and not the SUM.\nMake this dummy field a dual axis with the Female Population field.\nRight click on the axis header for the dummy field and click on “Synchronize Axis”.\n\n\n\n\n\n22\nNow, let’s format this dummy field. We do not want any axis headers so let’s remove that first by un-checking “Show Header” after we right click on the dummy field’s axis header.\nLet’s also un-check “Show Header” for the Female Population field.\n\n\n\n\n23\nWe also do not want any colored bars to be shown for the dummy field. Let’s remove the measure names field from the colors section in the marks card for both the dummy field and Female Population fields.\n\n\n\n\n\n\n24\nLet’s also reduce the size of the bars for the dummy field to the smallest possible size.\n\n\n\n25\nWe shall also make the dummy field’s color to be completely opaque with no borders.\n\n\n\n26\nBefore adding the Planning Area field to the text section in the marks card for the dummy field, let’s also change the type of mark from “Bar” into “Circle”.\nThen, drag the Planning Area field into the text section in the marks card.\n\n\n\n\n\n27\nLet’s format the text label to be bigger and bold, as well as center-aligned.\nNow we have a clean and insightful view that is ready for analysis!\n\n\n\n\n\n\n\n\nDiscussion of Analysis\nThe following section elaborates on the patterns revealed by the analytical visualization that was built.\nSo, what can we learn from this visualization that we built in Tableau Desktop?\n\n\n\n\n\nFirstly, when we look at the Top 9 Planning Areas, namely Bedok, Tampines, Jurong West, Sengkang, Woodlands, Hougang, Yishun, Chua Chu Kang and Punggol, there is one thing that is common. They are all HDB Residential Areas! So, there is no surprise that these are the Top 9 Planning Areas based on the total population in these areas.\nLet us now analyse this view by the Age Groups. Across the Planning Areas, a key thing to note would be that Bedok is the only area which has at least 1K population for both Males and Females who are above the age of 90. Moreover, they also have the highest population of both Males and Females who are between the ages of 75 and 89. From this, we can deduce that Bedok hosts one of the largest populations of elderly who are above the age of 75.\n\n\n\n\n\nIf we look at the opposite spectrum in the Age Group, both Sengkang and Punggol seem to have the largest population of Males and Females between the ages of 0 to 14. This could indicate that these Planning Areas are most likely to host younger families who are raising children and adolescents.\nAnother thing to note would be that 3 out of these 9 Planning Areas, namely Bedok, Tampines and Hougang, have a similar sum of population in the age groups of 45 to 59 and 60 to 74. This could be an indicator that in the future, these areas will host a larger group of elderly above the age of 60.\nLikewise, there are only 2 out of these 9 Planning Areas, namely Sengkang and Punggol, which have a higher population in the age group of 0 to 14 as when compared to the age group of 15 to 29. Meaning they have more people below the age of 14 than in the ages between 15 to 29. Whereas, for the other 7 Planning Areas, this is the opposite.\nWhen looking at Age Groups and Planning Areas, one section that draws my eye would be the Planning Area of Punggol. This is because it is notable that the population between the ages of 30 to 44 is almost the double of the population between the ages of 15 to 29. This is something that we could further analyse as a future work.\n\n\n\n\n\nMoving on to the breakdown by Gender, can we determine from this visualization whether we have more Males than Females? In my opinion, the answer would be no as this visualization does not intend to answer that question. However, with this visualization, for example, we can determine that there are more Males than Females in the ages between 0 to 14 across all the Top 9 Planning Areas. On the other hand, there are more Females than Males in the ages between 30 to 44 across all the Top 9 Planning Areas.\nThis concludes the work submitted for Take-Home Exercise 1. Thank you!"
  }
]