---
title: "Take-Home Exercise 4"
author: "Bhairavi"
date: "26 February 2023"
execute:
  warning: false
format: 
  html:
    code-fold: true
    code-summary: "Show/Hide"
editor: visual
---

The following is my submission for Take-Home Exercise 4.

# Task

xx

# Installing & Launching R Packages

load the libraries

```{r}
pacman::p_load(ggplot2, plotly, ggridges, gganimate, sunburstR, d3r, lubridate, readxl, tidyverse)
```

# Dataset

### Data Source

xx

### Data Preparation

load the IMPORT datasets
ignore the top and bottom rows
exclude columns which are not in this range: **January 2020 to December 2022**
convert all rows which are in the millions format to be in the thousands format, 
or split these rows into another data frame
pivot the values for the date range: covert to one column to contain the month year, and one column to contain the amount in thousands
change thousands to millions to standardize the comparison

```{r}
merchImportRaw <- read_excel("outputFile.xlsx", sheet = "T1", skip = 9)

merchImport <- slice(merchImportRaw, 2:(n() - 23)) %>%
  select(1, 3:38)

merchImportMills <- slice(merchImport, 1:6) %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Import")

merchImportThous <- slice(merchImport, 7:n()) %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Import")

merchImportTotal <- slice(merchImportRaw, 1:1) %>%
  select(1, 3:38) %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Import") %>%
  mutate("Import Raw" = Import * 1000) %>%
  mutate("Import" = round(Import / 1000000, digits = 0)) %>%
  select(1:3) %>%
  mutate(`Data Series` = str_replace_all(`Data Series`, " Merchandise Imports \\(Thousand Dollars\\)", ""))

```

load the EXPORT datasets
ignore the top and bottom rows
exclude columns which are not in this range: **January 2020 to December 2022**
convert all rows which are in the millions format to be in the thousands format, 
or split these rows into another data frame
pivot the values for the date range: covert to one column to contain the month year, and one column to contain the amount in thousands
change thousands to millions to standardize the comparison

```{r}
merchExportRaw <- read_excel("outputFile.xlsx", sheet = "T2", skip = 9)

merchExport <- slice(merchExportRaw, 2:(n() - 23)) %>%
  select(1, 3:38)

merchExportMills <- slice(merchExport, 1:6) %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Export")

merchExportThous <- slice(merchExport, 7:n()) %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Export")

merchExportTotal <- slice(merchExportRaw, 1:1) %>%
  select(1, 3:38) %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Export") %>%
  mutate("Export Raw" = Export * 1000) %>%
  mutate("Export" = round(Export / 1000000, digits = 0)) %>%
  select(1:3) %>%
  mutate(`Data Series` = str_replace_all(`Data Series`, " Merchandise Exports \\(Thousand Dollars\\)", ""))

```

merge the import and export columns into one data frame
pivot the import and export columns
split the period column into a year and month column
sort the data frame by data series and period
remove the text millions and thousands from the data frame


```{r}
merchMills <- merge(merchImportMills,
                    merchExportMills,
                    by = c("Data Series", "Period")) %>%
  pivot_longer(cols = c(`Import`, `Export`),
               names_to = "Type",
               values_to = "Amount (M)") %>%
  mutate(Date = as.Date(paste(Period, "01"), "%Y %B %d")) %>%
  arrange(`Data Series`, `Date`) %>%
  mutate(`Data Series` = str_replace_all(`Data Series`, " \\(Million Dollars\\)", "")) %>%
  mutate(Year = as.character(Date, format = '%y')) %>%
  mutate(Month = as.character(Date, format = '%b'))

merchThous <- merge(merchImportThous,
                    merchExportThous,
                    by = c("Data Series", "Period")) %>%
  pivot_longer(cols = c(`Import`, `Export`),
               names_to = "Type",
               values_to = "Amount (K)") %>%
  mutate(Date = as.Date(paste(Period, "01"), "%Y %B %d")) %>%
  arrange(`Data Series`, `Date`) %>%
  mutate(`Data Series` = str_replace_all(`Data Series`, " \\(Thousand Dollars\\)", "")) %>%
  mutate(Year = as.character(Date, format = '%y')) %>%
  mutate(Month = as.character(Date, format = '%b'))

merchTotalMills <- merge(merchImportTotal,
                    merchExportTotal,
                    by = c("Data Series", "Period")) %>%
  pivot_longer(cols = c(`Import`, `Export`),
               names_to = "Type",
               values_to = "Amount (M)") %>%
  mutate(Date = as.Date(paste(Period, "01"), "%Y %B %d")) %>%
  arrange(`Data Series`, `Date`) %>%
  mutate(Year = as.character(Date, format = '%y')) %>%
  mutate(Month = as.character(Date, format = '%b'))


```

Split datasets into import and export to be used as and when necessary

```{r}
merchMillsImport <- subset(merchMills, Type == "Import") %>%
  mutate(NewYear = year(Date))

merchMillsExport <- subset(merchMills, Type == "Export") %>%
  mutate(NewYear = year(Date))

merchTotalMillsImport <- subset(merchTotalMills, Type == "Import")
merchTotalMillsExport <- subset(merchTotalMills, Type == "Export")
```

The dataset is ready for visualization

```{r}
#| code-fold: false
head(merchMills)
head(merchThous)
head(merchTotalMills)
```

Additional datasets:

```{r}
#| code-fold: false
head(merchMillsImport)
head(merchMillsExport)
head(merchTotalMillsImport)
head(merchTotalMillsExport)
```

# Data Exploration & Visualization

Time-series data visualization Methods

## Classic Line Graph 

Overall 

```{r}
fig1 <- ggplot(data = merchTotalMills,
       aes(x = Date,
           y = `Amount (M)`)) +
  geom_line(aes(colour = Type)) +
  labs(title = "Trend of Import/Export, 2020 to 2022") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))

ggplotly(fig1)
```

By Region

```{r}
fig2 <- ggplot(data = merchMills,
       aes(x = Date,
           y = `Amount (M)`)) +
  geom_line(aes(colour = Type)) +
  labs(title = "Trend of Import/Export by Region, 2020 to 2022") +
  facet_wrap(~ `Data Series`) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))

ggplotly(fig2)
```

By Country

```{r}
fig3 <- ggplot(data = merchThous,
       aes(x = Date,
           y = `Amount (K)`)) +
  geom_line(aes(colour = `Data Series`)) +
  labs(title = "Trend of Import/Export by Country, 2020 to 2022") +
  facet_wrap(~ Type) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))

ggplotly(fig3)
```

Overall Trend

```{r}
groupedData <- merchTotalMills %>%
  group_by(Month) %>%
  summarise(avgValue = mean(`Amount (M)`))

fig4 <- ggplot() +
  geom_line(data = merchTotalMills,
            aes(x = Year,
                y = `Amount (M)`,
                group = Month,
                colour = Type)) +
  geom_hline(aes(yintercept = avgValue),
             data = groupedData,
             colour = "black",
             size = 0.1) +
  labs(title = "Cycle Plot showing trend of Imports & Exports by month and by year, 2020 to 2022") +
  facet_grid(~ factor(Month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))

ggplotly(fig4)
```

## Ridgeline

:::: panel-tabset

### Import

```{r}
ggplot(data = merchTotalMillsImport,
               aes(x = `Amount (M)`,
                   y = factor(Month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")),
                   fill = stat(x))) +
  geom_density_ridges_gradient(scale = 3,
                               rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Amount (M)",
                       option = "C") +
  labs(title = "Ridgeline Plot showing trend of Imports by month, 2020 to 2022") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
```

### Export

```{r}
ggplot(data = merchTotalMillsExport,
       aes(x = `Amount (M)`,
           y = factor(Month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")),
           fill = stat(x))) +
  geom_density_ridges_gradient(scale = 3,
                               rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Amount (M)",
                       option = "C") +
  labs(title = "Ridgeline Plot showing trend of Exports by month, 2020 to 2022") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) 
```

:::

## Ridgline by Regions

:::: panel-tabset

### Import

```{r}
ggplot(data = merchMillsImport,
       aes(x = `Amount (M)`,
           y = `Data Series`,
           fill = stat(x))) +
  geom_density_ridges_gradient(scale = 3,
                               rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Amount (M)",
                       option = "C") +
  labs(title = "Ridgeline Plot showing trend of Imports by Region, 2020 to 2022") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  transition_time(NewYear) +
  ease_aes('linear')
```

### Export

```{r}
ggplot(data = merchMillsExport,
       aes(x = `Amount (M)`,
           y = `Data Series`,
           fill = stat(x))) +
  geom_density_ridges_gradient(scale = 3,
                               rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Amount (M)",
                       option = "C") +
  labs(title = "Ridgeline Plot showing trend of Imports by Region, 2020 to 2022") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  transition_time(NewYear) +
  ease_aes('linear')
```

:::

## Control chart 

xx

## Slopegraphs

:::: panel-tabset

### Import By Region

```{r}
merchMillsImport <- merchMillsImport %>%
  mutate(Year = as.character(Date, format = '%Y'))

tmp2020import <- merchMillsImport %>% filter(Year == 2020)
tmp2022import <- merchMillsImport %>% filter(Year == 2022)

importAmount2020 <- tmp2020import$`Amount (M)`
importAmount2022 <- tmp2022import$`Amount (M)`
group <- tmp2020import$`Data Series`
years <- 3

a <- data.frame(importAmount2020, importAmount2022, group)
a <- a %>%
  group_by(group) %>%
  summarise(total2020 = sum(importAmount2020), total2022 = sum(importAmount2022))

lab2020 <- paste(a$group, round(a$total2020), sep = ", ")
lab2022 <- paste(a$group, round(a$total2022), sep = ", ")

fig6 <- ggplot(a) +
  geom_segment(aes(x = 0, xend = years, y = total2020, yend = total2022), size = 0.5) +
  ggtitle("Imports by Region") +
  geom_text(label = lab2020, y = a$total2020, x = -0.5, hjust = 1, vjust = 0.5, size = 2) +
  geom_text(label = lab2022, y = a$total2022, x = 3.5, hjust = 0, vjust = 0.5, size = 2) +
  geom_text(label = "2020", x = 0, y = (1.03 * max(a$total2020, a$total2022)), hjust = 0.2, size = 3) +
  geom_text(label = "2022", x = years, y = (1.03 * max(a$total2020, a$total2022)), hjust = 0, size = 3) +
  xlim(-1, (years + 1)) +
  ylim(min(a$total2020, a$total2022) -50, max(a$total2020, a$total2022) + 50) +
  xlab("") +
  ylab("") +
  theme_bw() +
  theme(panel.background = element_blank(),
        panel.grid = element_blank(),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        panel.border = element_blank())

ggplotly(fig6)
```

### Export By Region

```{r}
merchMillsExport <- merchMillsExport %>%
  mutate(Year = as.character(Date, format = '%Y'))

tmp2020export <- merchMillsExport %>% filter(Year == 2020)
tmp2022export <- merchMillsExport %>% filter(Year == 2022)

exportAmount2020 <- tmp2020export$`Amount (M)`
exportAmount2022 <- tmp2022export$`Amount (M)`
group <- tmp2020export$`Data Series`
years <- 3

b <- data.frame(exportAmount2020, exportAmount2022, group)
b <- b %>%
  group_by(group) %>%
  summarise(total2020 = sum(exportAmount2020), total2022 = sum(exportAmount2022))

lab2020 <- paste(b$group, round(b$total2020), sep = ", ")
lab2022 <- paste(b$group, round(b$total2022), sep = ", ")

fig7 <- ggplot(b) +
  geom_segment(aes(x = 0, xend = years, y = total2020, yend = total2022), size = 0.5) +
  ggtitle("Exports by Region") +
  geom_text(label = lab2020, y = b$total2020, x = -0.5, hjust = 1, vjust = 0.5, size = 2) +
  geom_text(label = lab2022, y = b$total2022, x = 3.5, hjust = 0, vjust = 0.5, size = 2) +
  geom_text(label = "2020", x = 0, y = (1.03 * max(b$total2020, b$total2022)), hjust = 0.2, size = 3) +
  geom_text(label = "2022", x = years, y = (1.03 * max(b$total2020, b$total2022)), hjust = 0, size = 3) +
  xlim(-1, (years + 1)) +
  ylim(min(b$total2020, b$total2022) -50, max(b$total2020, b$total2022) + 50) +
  xlab("") +
  ylab("") +
  theme_bw() +
  theme(panel.background = element_blank(),
        panel.grid = element_blank(),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        panel.border = element_blank())

ggplotly(fig7)
```

:::

xxx

## Horizon graph 

xx

## Sunburst Diagrams

:::: panel-tabset

### By Region

```{r}
hierRegion <- merchMills %>%
  group_by(Type, `Data Series`) %>%
  summarize(totalAmount = sum(`Amount (M)`))

treeRegion <- d3_nest(hierRegion, value_cols = "totalAmount")

sund2b(data = treeRegion,
       valueField = "totalAmount")
```

### By Country

```{r}
hierCountry <- merchThous %>%
  group_by(Type, `Data Series`) %>%
  summarize(totalAmount = sum(`Amount (K)`))

treeCountry <- d3_nest(hierCountry, value_cols = "totalAmount")

sunburst(data = treeCountry,
         valueField = "totalAmount",
         legend = FALSE)
```

:::

## Calendar 

xx

## Heatmap 

xx

## Stream Graph

xx

This concludes the work submitted for Take-Home Exercise 4. Thank you!
