---
title: "Take-Home Exercise 4"
author: "Bhairavi"
date: "26 February 2023"
execute:
  warning: false
format: html
editor: visual
---

# Task

xx

# Installing & Launching R Packages

load the libraries

```{r}
pacman::p_load(ggplot2, plotly, ggridges, gganimate, lubridate, readxl, tidyverse)
```

# Dataset

### Data Source

xx

### Data Preparation

load the dataset ignore the top and bottom rows

```{r}
merchImportRaw <- read_excel("outputFile.xlsx",
                       sheet = "T1",
                       skip = 9)

merchImport <- slice(merchImportRaw,
                     2:(n() - 23))

merchImportTotal <- slice(merchImportRaw,
                     1:1)

merchExportRaw <- read_excel("outputFile.xlsx",
                       sheet = "T2",
                       skip = 9)

merchExport <- slice(merchExportRaw,
                     2:(n() - 23))

merchExportTotal <- slice(merchExportRaw,
                     1:1)
```

exclude columns which are not in this range: **January 2020 to December 2022**

```{r}
merchImport <- merchImport %>%
  select(1, 3:38)

merchExport <- merchExport %>%
  select(1, 3:38)

merchImportTotal <- merchImportTotal %>%
  select(1, 3:38)

merchExportTotal <- merchExportTotal %>%
  select(1, 3:38)
```

convert all rows which are in the millions format to be in the thousands format, or split these rows into another data frame

```{r}
merchImportMills <- slice(merchImport,
                          1:6)

merchImportThous <- slice(merchImport,
                          7:n())

merchExportMills <- slice(merchExport,
                          1:6)

merchExportThous <- slice(merchExport,
                          7:n())
```

pivot the values for the date range: covert to one column to contain the month year, and one column to contain the amount in thousands

```{r}
merchImportMills <- merchImportMills %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Import")

merchImportThous <- merchImportThous %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Import")

merchExportMills <- merchExportMills %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Export")

merchExportThous <- merchExportThous %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Export")

merchImportTotalThous <- merchImportTotal %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Import")

merchExportTotalThous <- merchExportTotal %>%
  pivot_longer(cols = !`Data Series`,
               names_to = "Period",
               values_to = "Export")
```

change thousands to millions to standardize the comparison?

```{r}
merchImportTotalMills <- merchImportTotalThous %>%
  mutate("Import Raw" = Import * 1000) %>%
  mutate("Import" = round(Import / 1000000, digits = 0))

merchExportTotalMills <- merchExportTotalThous %>%
  mutate("Export Raw" = Export * 1000) %>%
  mutate("Export" = round(Export / 1000000, digits = 0))
```

rename the data series for the data frame with totals

```{r}
merchImportTotalMills <- merchImportTotalMills %>%
  select(1:3) %>%
  mutate(`Data Series` = str_replace_all(`Data Series`, " Merchandise Imports \\(Thousand Dollars\\)", ""))

merchExportTotalMills <- merchExportTotalMills %>%
  select(1:3) %>%
  mutate(`Data Series` = str_replace_all(`Data Series`, " Merchandise Exports \\(Thousand Dollars\\)", ""))
```

merge the import and export columns into one data frame

```{r}
merchMills <- merge(merchImportMills,
                    merchExportMills,
                    by = c("Data Series", "Period"))

merchThous <- merge(merchImportThous,
                    merchExportThous,
                    by = c("Data Series", "Period"))

merchTotalMills <- merge(merchImportTotalMills,
                    merchExportTotalMills,
                    by = c("Data Series", "Period"))
```

pivot the import and export columns

```{r}
merchMills <- merchMills %>%
  pivot_longer(cols = c(`Import`, `Export`),
               names_to = "Type",
               values_to = "Amount (M)")

merchThous <- merchThous %>%
  pivot_longer(cols = c(`Import`, `Export`),
               names_to = "Type",
               values_to = "Amount (K)")

merchTotalMills <- merchTotalMills %>%
  pivot_longer(cols = c(`Import`, `Export`),
               names_to = "Type",
               values_to = "Amount (M)")
```

split the period column into a year and month column

```{r}
merchMills <- merchMills %>%
  mutate(Date = as.Date(paste(Period, "01"),
                        "%Y %B %d"))

merchThous <- merchThous %>%
  mutate(Date = as.Date(paste(Period, "01"),
                        "%Y %B %d"))

merchTotalMills <- merchTotalMills %>%
  mutate(Date = as.Date(paste(Period, "01"),
                        "%Y %B %d"))
```

sort the data frame by data series and period

```{r}
merchMills <- merchMills %>%
  arrange(`Data Series`, `Date`)

merchThous <- merchThous %>%
  arrange(`Data Series`, `Date`)

merchTotalMills <- merchTotalMills %>%
  arrange(`Data Series`, `Date`)
```

remove the text millions and thousands from the data frame

```{r}
merchMills <- merchMills %>%
  mutate(`Data Series` = str_replace_all(`Data Series`, " \\(Million Dollars\\)", ""))

merchThous <- merchThous %>%
  mutate(`Data Series` = str_replace_all(`Data Series`, " \\(Thousand Dollars\\)", ""))
```

The dataset is ready for visualization

```{r}
head(merchMills)
head(merchThous)
head(merchTotalMills)
```

# Data Exploration & Visualization

Time-series data visualization Methods

Classic Line Graph (Overall)

```{r}
fig1 <- ggplot(data = merchTotalMills,
       aes(x = Date,
           y = `Amount (M)`)) +
  geom_line(aes(colour = Type)) +
  labs(title = "Trend of Import/Export, 2020 to 2022") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))

ggplotly(fig1)
```

Classic Line Graph by Region

```{r}
fig2 <- ggplot(data = merchMills,
       aes(x = Date,
           y = `Amount (M)`)) +
  geom_line(aes(colour = Type)) +
  labs(title = "Trend of Import/Export by Region, 2020 to 2022") +
  facet_wrap(~ `Data Series`) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))

ggplotly(fig2)
```

Classic Line Graph by Country

```{r}
fig3 <- ggplot(data = merchThous,
       aes(x = Date,
           y = `Amount (K)`)) +
  geom_line(aes(colour = `Data Series`)) +
  labs(title = "Trend of Import/Export by Country, 2020 to 2022") +
  facet_wrap(~ Type) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))

ggplotly(fig3)
```

Cycle plot for overall trend of imports and exports

```{r}
merchTotalMills <- merchTotalMills %>%
  mutate(Year = as.character(Date, format = '%y')) %>%
  mutate(Month = as.character(Date, format = '%b'))

groupedData <- merchTotalMills %>%
  group_by(Month) %>%
  summarise(avgValue = mean(`Amount (M)`))

fig4 <- ggplot() +
  geom_line(data = merchTotalMills,
            aes(x = Year,
                y = `Amount (M)`,
                group = Month,
                colour = Type)) +
  geom_hline(aes(yintercept = avgValue),
             data = groupedData,
             colour = "black",
             size = 0.1) +
  labs(title = "Cycle Plot showing trend of Imports & Exports by month and by year, 2020 to 2022") +
  facet_grid(~ factor(Month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))

ggplotly(fig4)
```

Ridgeline plot

```{r}
merchTotalMillsImport <- subset(merchTotalMills, Type == "Import")
merchTotalMillsExport <- subset(merchTotalMills, Type == "Export")

merchTotalMillsImport
merchTotalMillsExport
```
## Ridgeline

:::: panel-tabset

### Import

```{r}
#| code-fold: true
ggplot(data = merchTotalMillsImport,
               aes(x = `Amount (M)`,
                   y = factor(Month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")),
                   fill = stat(x))) +
  geom_density_ridges_gradient(scale = 3,
                               rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Amount (M)",
                       option = "C") +
  labs(title = "Ridgeline Plot showing trend of Imports by month, 2020 to 2022") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
```

### Export

```{r}
#| code-fold: true
ggplot(data = merchTotalMillsExport,
       aes(x = `Amount (M)`,
           y = factor(Month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")),
           fill = stat(x))) +
  geom_density_ridges_gradient(scale = 3,
                               rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Amount (M)",
                       option = "C") +
  labs(title = "Ridgeline Plot showing trend of Exports by month, 2020 to 2022") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) 
```

:::

## Ridgline by Regions

:::: panel-tabset

### Import

```{r}
#| code-fold: true
merchMillsImport <- subset(merchMills, Type == "Import")

merchMillsImport <- merchMillsImport %>%
  mutate(NewYear = year(Date))

ggplot(data = merchMillsImport,
       aes(x = `Amount (M)`,
           y = `Data Series`,
           fill = stat(x))) +
  geom_density_ridges_gradient(scale = 3,
                               rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Amount (M)",
                       option = "C") +
  labs(title = "Ridgeline Plot showing trend of Imports by Region, 2020 to 2022") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  transition_time(NewYear) +
  ease_aes('linear')
```

### Export

```{r}
#| code-fold: true
merchMillsExport <- subset(merchMills, Type == "Export")

merchMillsExport <- merchMillsExport %>%
  mutate(NewYear = year(Date))

ggplot(data = merchMillsExport,
       aes(x = `Amount (M)`,
           y = `Data Series`,
           fill = stat(x))) +
  geom_density_ridges_gradient(scale = 3,
                               rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Amount (M)",
                       option = "C") +
  labs(title = "Ridgeline Plot showing trend of Imports by Region, 2020 to 2022") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  transition_time(NewYear) +
  ease_aes('linear')
```

:::

### Control chart 

Slopegraph
Horizon graph 
Sunburst diagram 
Calendar 
Heatmap 
Stream Graph

xx
