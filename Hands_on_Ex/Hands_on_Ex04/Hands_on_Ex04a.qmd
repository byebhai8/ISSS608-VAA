---
title: "Hands-On Exercise 4: Visual Statistical Analysis"
author: "Bhairavi"
date: "16 February 2023"
---

# Visual Analysis with ggstatsplot

- An extension of ggplot2 package for creating graphics with details from statistical tests included in the plot themselves
- Provides an alternative statistical inference method by default
- Follows best practices for statistical reporting

For all statistical tests reported in the plots, the default template abbides by the APA gold standard for statistical reporting

### Installing & Launching Packages

In this exercise, we will be using ggstatsplot and tidyverse.

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

Import the data for this exercise:

```{r}
exam <- read_csv("data/Exam_data.csv")
```

### One Sample Test

In the code chunk below, gghistostats() is used to build a visual of one-sample test on English scores. More information can be found here: https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html

```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English Scores"
)
```

### Bayes Factor

- A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another
- Can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories
- Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and allows us to use external information to do so
- It tells us what the weight of the evidence is in favor of a give hypothesis
- When comparing two hypotheses, H1 (alternate hypotheses) and H0 (null hypothesis), the Bayes factor is often written as B10
- The Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes factor

### Two Sample Mean Test

In the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths score by gender.

```{r}
ggbetweenstats(
  data = exam,
  x = GENDER,
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

### One way ANOVA Test

In the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English scores by race.

```{r}
ggbetweenstats(
  data = exam,
  x = RACE,
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE,
  pairwise.comparisons = TRUE,
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

### Significant Test of Correlation

In the code chunk below, ggscatterstats() is used to build a visual for Significant Test of of Correlation between Maths scores and English scores.

```{r}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  margina = FALSE
)
```

### Significant Test of Association

In the code chunk below, the Maths scores is binned into a 4-class variable by using cut().

```{r}
exam1 <- exam %>%
  mutate(MATHS_bins = cut(MATHS,
                          breaks = c(0, 60, 75, 85, 100)))
```

In the code chunk below, ggbarstats() is used to build a visual for Significant Test of Association.

```{r}
ggbarstats(
  exam1, 
  x = MATHS_bins,
  y = GENDER
)
```

# Visualizing Models

In this section, we will visualize model diagnostic and model parameters by using the parameters package.

### Installing & Launching Packages

In this exercise, we will be using the following libraries:

```{r}
pacman::p_load(readxl, performance, parameters, see)
```

Import the data for this exercise:

```{r}
carResale <- read_xls("data/ToyotaCorolla.xls",
                      "data")
```

### Multiple Regression Model

The code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period,
            data = carResale)
model
```

### Checking for Multicolinearity

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

### Checking Normality Assumption

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + Weight + Guarantee_Period,
            data = carResale)
check_n <- check_normality(model1)
plot(check_n)
```

### Checking for Homogeneity of Variances

```{r}
check_h <- check_heteroscedasticity(model1)
plot(check_h)
```

### Complete Check

```{r}
#| fig-width: 12
#| fig-height: 10

check_model(model1)
```

### Visualizing Regression Parameters

In the code chunk below, plot() of see package and parameters() of parameters package is used to visualize the parameters of a regression model.

```{r}
plot(parameters(model1))
```

In the code chunk below, ggcoefstats() of ggstatsplot package is used to visualize the parameters of a regression model.

```{r}
ggcoefstats(model1,
            output = "plot")
```