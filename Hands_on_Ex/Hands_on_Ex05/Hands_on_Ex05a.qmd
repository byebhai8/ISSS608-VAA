---
title: "Hands-on Exercise 5: Ternary Plots"
author: "Bhairavi"
date: "17 February 2023"
---

Ternary Plots are a way of displaying the distribution and variability of three-part compositional data. For example, the proportion of aged, economy active and young population, or sand, silt and clay in solid. It's display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.

In this hands-on exercise, we will learn how to build a ternary plot programmatically using R for visualizing and analyzing the population structure of Singapore.

The hands-on exercise will consist of four steps:

-   Install and launch tidyverse and ggtern packages
-   Derive three new measures using mutate() function of dplyr package
-   Build a static ternary plot using ggtern() function of ggtern package
-   Build an interactive ternary plot using plot-ly() function of Plotly R package

# Installing & Launching R Packages

Two main R packages will be used in this hands-on exercise:

-   ggtern, a ggplot extension specially designed to plot ternary diagrams
-   Plotly R, an R package for creating interactive web-based graphs via plotly's JavaScript graphing library, plotly.js

We will also need to ensure that selected tidyverse family packages are also installed and loaded.

The code chunk below loads the necessary packages:

```{r}
pacman::p_load(ggtern, plotly, tidyverse)
```

# Data Preparation

For this hands-on exercise, we will use the following dataset:

```{r}
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv")
```

Next, we will use the mutate() function of dplyr package to derive three new measures, namely young, active and old.

```{r}
agpop_mutated <- pop_data %>%
  mutate('Year' = as.character(Year)) %>%
  pivot_wider(names_from = AG,
              values_from = Population) %>%
  mutate(YOUNG = rowSums(.[4:8])) %>%
  mutate(ACTIVE = rowSums(.[9:16])) %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018) %>%
  filter(TOTAL > 0)
```

# Static Ternary Diagram

With the use of ggtern() function of ggtern package, we will create a simple ternary plot.

```{r}
ggtern(data = agpop_mutated,
       aes(x = YOUNG,
           y = ACTIVE,
           z = OLD)) +
  geom_point() +
  labs(title = "Population Structure, 2018") +
  theme_rgbw()
```

# Interactive Ternary Diagram

The code chunk below will plot an interactive ternary plot using plot_ly() function of Plotly R.

```{r}
label <- function(txt) {
  list(text = txt,
       x = 0.1, y = 1,
       ax = 0, ay = 0,
       xref = "paper", yref = "paper",
       align = "center",
       font = list(family = "serif",
                   size = 15,
                   color = "white"),
       bgcolor = "#b3b3b3",
       bordercolor = "black",
       borderwidth = 2)
}

axis <- function(txt) {
  list(title = txt,
       tickformat = ".0%",
       tickfont = list(size = 10))
}

ternaryAxes <- list(aaxis = axis("Young"),
                    baxis = axis("Active"),
                    caxis = axis("Old"))

plot_ly(agpop_mutated,
        a = ~YOUNG,
        b = ~ACTIVE,
        c = ~OLD,
        color = I("black"),
        type = "scatterternary") %>%
  layout(annotations = label("Ternary Markers"),
         ternary = ternaryAxes)
```
