---
title: "Hands-on Exercise 2: Creating Elegent Graphics with ggplot2"
author: "Bhairavi"
date: "21 January 2023"
---

## Getting Started

### Installing and loading required libraries

Before we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto the R environment.

The chunk of code below will install and load the required libraries for this hands-on exercise.

```{r}
pacman::p_load(tidyverse, patchwork, ggthemes, hrbrthemes, ggrepel)
```

### Importing Data

The code chunk below imports exam_data.csv into the R environment using read_csv() function of readr package.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

There are a total of seven attributes, four of them are of categorical data type while the others are of continuous data type.

-   Categorical attributes are: ID, CLASS, GENDER and RACE

-   Continuous attributes are MATHS, ENGLISH and SCIENCE

## Beyong ggplot2 Annotation

One of the challenges in plotting statistical graphs is annotation, especially with a large number of data points.

### Working with ggrepel

ggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text. We simply replace geom_text() with geom_text_repel() and geom_label() with geom_label_repel().

```{r}
ggplot(data = exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              size = 0.5) +
  geom_label_repel(aes(label = ID),
                   fontface = "bold") +
  coord_cartesian(xlim = c(0, 100),
                  ylim = c(0, 100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## Beyond ggplot2 Themes

ggplot2 comes with eight built-in themes. They are

1.  theme_gray()

2.  theme_bw()

3.  theme_classic()

4.  theme_dark()

5.  theme_light()

6.  theme_linedraw()

7.  theme_minimal()

8.  theme_void()

```{r}
ggplot(data = exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores")
```

### Working with ggtheme package

ggthemes provides ggplot2 themes with the ability to replicate the look of plots. It also provides extra geoms and scales for ggplot2.

```{r}
ggplot(data = exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

### Working with hrbrthemes package

hrbrthemes package provides a basic theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

```{r}
ggplot(data = exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

-   axis_title_size argument is used to increase the font size of the axis title

-   base_size argument is used to increase the default axis label to 15

-   grid argument is used to remove the x-axis grid lines

```{r}
ggplot(data = exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

## Beyond ggplot2 facet

In this section, we will be creating composite plots by combining multiple graphs. First, let's create three statistical graphs.

```{r}
p1 <- ggplot(data = exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins = 20, 
                 boundary = 100,
                 color = "grey25", 
                 fill = "grey90") + 
  coord_cartesian(xlim = c(0,100)) +
  ggtitle("Distribution of Maths scores")

p2 <- ggplot(data = exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins = 20, 
                 boundary = 100,
                 color = "grey25", 
                 fill = "grey90") +
  coord_cartesian(xlim = c(0,100)) +
  ggtitle("Distribution of English scores")

p3 <- ggplot(data = exam_data, 
             aes(x = MATHS, 
                 y =ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm, 
              size = 0.5) +  
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

### Creating Composite Graphics: patchwork methods

Sometimes, multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions that provide functions to compose figures with multiple graphs.

Patchwork package has a very simple syntax where we can create layouts super easily. The general syntax combines a two-column layout using the plus sign, a parenthesis to create a subplot group and a two row layout using the division sign.

Try this:

```{r}
p1 + p2 / p3
```

'\|' will place the plots beside each other while '/' will stack them:

```{r}
(p1 / p2) | p3
```

Patchwork also provides auto-tagging capabilities which aim to identify subplots in text:

```{r}
((p1 / p2) | p3) +
  plot_annotation(tag_levels = 'I')
```

To add themes:

```{r}
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```

Besides providing functions to place plots next to each other based on the provided layout, patchwork also allows us to place one or several plots of graphic elements freely on top or below another plot.

```{r}
p3 + inset_element(p2,
                    left = 0.02,
                    bottom = 0.7,
                    right = 0.5,
                    top = 1)
```
