---
title: "Hands-On Exercise 3: Programming Interactive Data Visualization with R"
author: "Bhairavi"
date: "4 February 2023"
---

## Getting Started

The code chunk below will install and launch the necessary R packages.

```{r}
pacman::p_load(ggiraph, plotly, gganimate, DT, tidyverse, patchwork)
```

## Importing Data

The code chunk below will read the Exam_data.csv file.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## Interactive Data Visualization - ggiraph methods

ggiraph is a html-widget and a ggplot2 extension. It allows ggplot graphics to be interactive. This interactivity is made with ggplot geometries that can take in three arguments:

-   tooltip: a column of datasets that contain tooltips to be displayed when the mouse if over elements
-   onclick: a column of datasets that contain a JavaScript function to be executed when elements are clicked
-   data_id: a column of datasets that contain an id to be associated with elements

When used within a R shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.

### Tooltip Effects

The code chunk below will plot an interactive statistical graph using the ggiraph package. This code chunk consists of two parts - the first part is to plot a ggplot object while the next part will use girage() of ggiraph to create an interactive svg object.

```{r}
p <- ggplot(data = exam_data,
           aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = ID),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(ggobj = p,
       width_svg = 6,
       height_svg = 6 * 0.618)
```

### Multiple Info on Tooltips 

The content of the tooltip can be customized as shown in the code chunk below.

```{r}
exam_data$tooltip <- c(paste0("Name = ", exam_data$ID,
                              "\nClass = ", exam_data$CLASS))

p <- ggplot(data = exam_data,
           aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = exam_data$tooltip),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(ggobj = p,
       width_svg = 8,
       height_svg = 8 * 0.618)
```

### Customizing Tooltip Style

The code chunk below uses opts_tooltip() of ggiraph to customize the tooltip rendering by adding css declarations.

```{r}
tooltip_css <- "background-color: white; font-style: bold; color: black;"

p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = ID),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(ggobj = p,
       width_svg = 6,
       height_svg = 6 * 0.618,
       options = list(opts_tooltip(css = tooltip_css)))
```

### Displaying Statistics on Tooltips

The code chunk below shows an advanced way to customize tooltips. In this example, a function is sued to compute the 90% confidence interval of the mean, and the derived statistics will then be displayed in the tooltip.

```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data = exam_data,
                   aes(x = RACE)) +
  stat_summary(aes(y = MATHS,
                   tooltip = after_stat(tooltip(y, ymax))),
               fun.data = "mean_se",
               geom = GeomInteractiveCol,
               fill = "light blue") +
  stat_summary(aes(y = MATHS),
               fun.data = mean_se,
               geom = "errorbar",
               width = 0.2,
               size = 0.2)

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8 * 0.618)
```

### Hover Effect with Aesthetic

The code chunk below shows the second interactive feature of ggiraph, namely data_id.

```{r}
p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes(data_id = CLASS),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6 * 0.618
)
```

The default value of the hover css is hover_css = "fill: orange;".

### Styling Hover Effect

In the code chunk below, css codes are used to change the highlighting effect.

```{r}
p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes(data_id = CLASS),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6 * 0.618,
  options = list(opts_hover(css = "fill: #202020;"),
                 opts_hover_inv(css = "opacity: 0.2;"))
)
```

### Combining Tooltip and Hover Effect

There are times that we want to combine the tooltip and hover effect on the interactive statistical graph. The code chunk below achieves this:

```{r}
p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = CLASS,
                                data_id = CLASS),
                            stackgroups = TRUE,
                            binwidth = 1,
                            method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(ggobj = p,
       width_svg = 6,
       height_svg = 6 * 0.618,
       options = list(opts_hover(css = "fill: #202020;"),
                      opts_hover_inv(css = "opacity: 0.2;")))
```

### Click Effect with onclick

The onclick argument of ggiraph provides hotlink interactivity on the web. The code chunk below shows an example of onclick.

```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes(onclick = onclick),
                            stackgroups = TRUE,
                            binwidth = 1,
                            method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(ggobj = p,
       width_svg = 6,
       height_svg = 6 * 0.618)
```

Note that click actions must be a string column in the dataset containing valid javascript instructions.

### Coordinated Multiple Views

An example of this method; when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualization will also be highlighted.

For this to be built, we need to use an appropriate interactive function of ggiraph to create the multiple views. Also, patchwork function of the patchwork package will be used inside the girafe function to create the interactive coordinated multiple views.

```{r}
p1 <- ggplot(data = exam_data,
             aes(x = MATHS)) + 
  geom_dotplot_interactive(aes(data_id = ID),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") +
  coord_cartesian(xlim = c(0, 100)) +
  scale_y_continuous(NULL,
                     breaks = NULL)

p2 <- ggplot(data = exam_data,
             aes(x = ENGLISH)) + 
  geom_dotplot_interactive(aes(data_id = ID),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") +
  coord_cartesian(xlim = c(0, 100)) +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(code = print(p1 / p2),
       width_svg = 6,
       height_svg = 6,
       options = list(opts_hover(css = "fill: #202020;"),
                      opts_hover_inv(css = "opacity: 0.2;")))
```

The data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when we hover over a data point.

## Interactive Data Visualization - plotly methods

Plotly's R graphing library can create interactive web graphics from ggplot2 graphs. This is different from other plotly platforms as plot.R is free and open-source.

There are two ways to create interactive graphs using plotly - by using plot_ly() or by using ggplotly().

### Creating Interactive Scatter Plot: plot_ly() method

The code chunk below plots an interactive scatter plot using plot_ly().

```{r}
plot_ly(data = exam_data,
        x = ~MATHS,
        y = ~ENGLISH)
```

### Visual Variable: plot_ly() method

In the code chunk below, the color argument is mapped to a qualitative visual variable.

```{r}
plot_ly(data = exam_data,
        x = ~MATHS,
        y = ~ENGLISH,
        color = ~RACE)
```

We can click on the color symbols at the legend for interactivity.

### Changing Color Palette: plot_ly() method

In the code chunk below, colors argument is used to change the default color palette to ColorBrewel color palette.

```{r}
plot_ly(data = exam_data,
        x = ~MATHS,
        y = ~ENGLISH,
        color = ~RACE,
        colors = "Set1")
```

### Customizing Color Scheme: plot_ly() method

In the code chunk below, a customized color scheme is created. Then, the colors argument is used to change the default color palette to the customized color scheme.

```{r}
pal <- c("red", "purple", "blue", "green")

plot_ly(data = exam_data,
        x = ~MATHS,
        y = ~ENGLISH,
        color = ~RACE,
        colors = pal)
```

### Customizing Tooltip: plot_ly() method

In the code chunk below, the text argument is used to change the default tooltip.

```{r}
plot_ly(data = exam_data,
        x = ~MATHS,
        y = ~ENGLISH,
        text = ~paste("Student ID:", ID,
                      "<br>Class:", CLASS),
        color = ~RACE,
        colors = "Set1")
```

### Layouts: plot_ly() method

In the code chunk below, the layout argument is used to change the default tooltip.

```{r}
plot_ly(data = exam_data,
        x = ~MATHS,
        y = ~ENGLISH,
        text = ~paste("Student ID:", ID,
                      "<br>Class:", CLASS),
        color = ~RACE,
        colors = "Set1") %>%
  layout(title = "English Score vs. Maths Score",
         xaxis = list(range = c(0, 100)),
         yaxis = list(range = c(0, 100)))
```

### Creating Interactive Scatter Plot: ggplotly() method

The code chunk below plots an interactive scatter plot using ggplotly().

```{r}
p <- ggplot(data = exam_data,
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim = c(0, 100),
                  ylim = c(0, 100))

ggplotly(p)
```

### Coordinated Multiple Views with plotly

The code chunk below plots two scatter plots and places them next to each other side-by-side by using subplot() of plotly package.

```{r}
p1 <- ggplot(data = exam_data,
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim = c(0, 100),
                  ylim = c(0, 100))

p2 <- ggplot(data = exam_data,
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim = c(0, 100),
                  ylim = c(0, 100))

subplot(ggplotly(p1),
        ggplotly(p2))
```

To be able to click on a data point of one of the scatter plot and see how the corresponding point on the other scatter plot is selected, try out the following code chunk,

```{r}
d <- highlight_key(exam_data)

p1 <- ggplot(data = d,
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim = c(0, 100),
                  ylim = c(0, 100))

p2 <- ggplot(data = d,
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim = c(0, 100),
                  ylim = c(0, 100))

subplot(ggplotly(p1),
        ggplotly(p2))
```

## Interactive Data Visualization - crosstalk methods

Crosstalk is an add-on to the html-widgets package. It extends html-widgets with a set of classes, functions and conventions for implementation cross-widget interactions.

### Interactive Data Table: DT package

This is a wrapper of the JavaScript library DataTables. With this, data objects in R can be rendered as HTML tables.

```{r}
DT::datatable(exam_data, class = "compact")
```

### Linked Brushing: crosstalk method

In the code chunk below, we can implement coordinated brushing.

```{r}
d <- highlight_key(exam_data)

p <- ggplot(data = d,
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim = c(0, 100),
                  ylim = c(0, 100))

gg <- highlight(ggplotly(p),
                "plotly_selected")

crosstalk::bscols(gg,
                  DT::datatable(d),
                  widths = 5)
```

The highlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) of multiple plots. These options are primarily designed for linking multiple plotly graphs and may not behave as expected when linking plotly to another html-widget package via crosstalk. In some cases, other html-widgets will respect these options such as persistent selection in leaflet.

bscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but it is especially designed to work in an R Markdown document. Just a warning, this will bring in all of Bootstrap.



xxx