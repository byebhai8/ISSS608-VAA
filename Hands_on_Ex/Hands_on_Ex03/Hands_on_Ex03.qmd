---
title: "Hands-On Exercise 3: Programming Interactive Data Visualization with R"
author: "Bhairavi"
date: "4 February 2023"
---

## Getting Started

The code chunk below installs and launches the following R packages.

```{r}
pacman::p_load(ggiraph, plotly, gganimate, DT, tidyverse, patchwork)
```

## Importing Data

The code chunk below will read the Exam_data.csv file.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## Interactive Data Visualization

### ggiraph methods

ggiraph is a html-widget and a ggplot2 extension. It allows ggplot graphics to be interactive. This interactivity is made with ggplot geometries that can take in three arguments:

-   tooltip: a column of datasets that contain tooltips to be displayed when the mouse if over elements
-   onclick: a column of datasets that contain a JavaScript function to be executed when elements are clicked
-   data_id: a column of datasets that contain an id to be associated with elements

When used within a R shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.

#### Tooltip Effects

The code chunk below will plot an interactive statistical graph using the ggiraph package. This code chunk consists of two parts - the first part is to plot a ggplot object while the next part will use girage() of ggiraph to create an interactive svg object.

```{r}
p <- ggplot(data = exam_data,
           aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = ID),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(ggobj = p,
       width_svg = 6,
       height_svg = 6 * 0.618)
```

#### Multiple Info on Tooltips 

The content of the tooltip can be customized as shown in the code chunk below.

```{r}
exam_data$tooltip <- c(paste0("Name = ", exam_data$ID,
                              "\nClass = ", exam_data$CLASS))

p <- ggplot(data = exam_data,
           aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = exam_data$tooltip),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(ggobj = p,
       width_svg = 8,
       height_svg = 8 * 0.618)
```

#### Customizing Tooltip Style

The code chunk below uses opts_tooltip() of ggiraph to customize the tooltip rendering by adding css declarations.

```{r}
tooltip_css <- "background-color: white; font-style: bold; color: black;"

p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = ID),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(ggobj = p,
       width_svg = 6,
       height_svg = 6 * 0.618,
       options = list(opts_tooltip(css = tooltip_css)))
```

#### Displaying Statistics on Tooltips


